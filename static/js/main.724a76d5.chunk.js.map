{"version":3,"sources":["components/menu/index.tsx","pages/basic/index.tsx","pages/useState/index.tsx","pages/useEffect/index.tsx","pages/useContext/Toolbar.tsx","pages/useContext/index.tsx","pages/useReducer/index.tsx","pages/useCallback/index.tsx","pages/useMemo/index.tsx","pages/useRef/index.tsx","pages/useLayoutEffect/index.tsx","pages/selfHooks/useSelfHooks.tsx","pages/selfHooks/index.tsx","utils/helper.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","useState","current","setCurrent","className","path","title","map","menu","index","key","onClick","changeMenu","to","Basic","count","setCount","useEffect","document","StateDemo","console","log","doubleCount","setDoubleCount","style","height","EffectDemo","id","setInterval","c","clearInterval","ThemedButton","theme","useContext","ThemeContext","background","color","foreground","name","Toolbar","themes","createContext","ContextDemo","currentTheme","setCurrentTheme","Provider","value","Number","initialCount","init","initialState","reducer","state","action","type","payload","Error","useReducerDemo","useReducer","dispatch","CallbackDemo","setHeight","measuredRef","useCallback","node","getBoundingClientRect","ref","Math","round","Child","content","otherName","useMemo","changeName","MemoDemo","setName","setContent","useRefDemo","inputEl","useRef","time","setTime","renderFirst","focus","Com","useLayoutEffect","LayoutEffectDemo","useSelfHooks","SelfHooksDemo","selfHooks","forceUpdate","x","useForceUpdate","prevCount","usePrevious","BasicExample","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.724a76d5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nconst Menu = () => {\r\n    const menuList = [{\r\n        path: '/', title: \"basic\"\r\n    }, {\r\n        path: '/state', title: \"useState demo\"\r\n    }, {\r\n        path: '/effect', title: \"useEffect demo\"\r\n    }, {\r\n        path: '/context', title: \"useContext demo\"\r\n    }, {\r\n        path: '/reducer', title: \"useReducer demo\"\r\n    }, {\r\n        path: '/callback', title: \"useCallback demo\"\r\n    }, {\r\n        path: '/ref', title: \"useRef demo\"\r\n    }, {\r\n        path: '/memo', title: \"useMemo demo\"\r\n    }, {\r\n        path: '/layoutEffect', title: \"useLayoutEffect demo\"\r\n    }, {\r\n        path: '/selfHoosk', title: \"自定义Hooks demo\"\r\n    }];\r\n    const [current, setCurrent] = useState(0);\r\n    const changeMenu = (index: number) => {\r\n        setCurrent(index);\r\n    }\r\n    return (\r\n        <ul className=\"menu\">\r\n            {menuList.map((menu: any, index: number) =>\r\n                <li\r\n                    key={index}\r\n                    onClick={() => { changeMenu(index) }}\r\n                    className={index === current ? 'current' : ''}\r\n                >\r\n                    <Link to={menu.path}>\r\n                        {menu.title}\r\n                    </Link>\r\n                </li>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Menu;","import React, { useState, useEffect } from \"react\";\r\n\r\n// hooks组件\r\nfunction Basic() {\r\n    // 声明一个叫 “count” 的 state 变量。\r\n    const [count, setCount] = useState(0);\r\n\r\n\r\n    // 相当于 componentDidMount 和 componentDidUpdate:\r\n    useEffect(() => {\r\n        // 使用浏览器的 API 更新页面标题\r\n        document.title = `You clicked ${count} times`;\r\n    });\r\n    return (\r\n        <div>\r\n            <p>You clicked {count} times</p>\r\n            <button onClick={() => setCount(count + 1)}>\r\n                Click me\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\n// class组件\r\n// class Basic extends React.Component<any, any> {\r\n//     constructor(props: any) {\r\n//         super(props);\r\n//         this.state = {\r\n//             count: 0\r\n//         };\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         document.title = `You clicked ${this.state.count} times`;\r\n//     }\r\n\r\n//     componentDidUpdate() {\r\n//         document.title = `You clicked ${this.state.count} times`;\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <p>You clicked {this.state.count} times</p>\r\n//                 <button onClick={() => this.setState({ count: this.state.count + 1 })}>\r\n//                     Click me\r\n//                 </button>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nexport default Basic;","import React, { useState, useEffect } from \"react\";\r\n\r\nconst StateDemo = () => {\r\n    const [count, setCount] = useState(2);\r\n    // 相当于\r\n    // const countState = useState(0);\r\n    // const count = countState[0];\r\n    // const setCount = countState[1];\r\n\r\n    // 若initialState计算比较复杂\r\n    // initialState只在初始渲染时起作用\r\n    const [doubleCount, setDoubleCount] = useState(() => {\r\n        console.log('initial state');\r\n        return count * 2;\r\n    });\r\n\r\n    // state组织方式\r\n    // const [top, setTop] = useState(0);\r\n    // const [left, setLeft] = useState(0);\r\n    // const [location, setSize] = useState({\r\n    //     top: 0, left: 0\r\n    // });\r\n\r\n    useEffect(() => {\r\n        console.log('doubleCount')\r\n        setDoubleCount(count * 2);\r\n    }, [count])\r\n\r\n    const handleClick = () => {\r\n        setCount(count + 1);\r\n        // 回调写法\r\n        // setCount((preState: any) => {\r\n        //     return preState + 1;\r\n        // })\r\n    }\r\n    console.log('render');\r\n    return (\r\n        <div style={{ height: \"110vh\" }}>\r\n            <p>You clicked {count} times</p>\r\n            <p>double is {doubleCount} times</p>\r\n            <button onClick={handleClick}>\r\n                Click me\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default StateDemo;","import React, { useState, useEffect } from \"react\";\r\n\r\nconst EffectDemo = () => {\r\n    const [count, setCount] = useState(0);\r\n\r\n\r\n    // 相当于 componentDidMount 和 componentDidUpdate\r\n    // 使用 eslint-plugin-react-hooks  \r\n    useEffect(() => {\r\n        // 使用浏览器的 API 更新页面标题\r\n        document.title = `You clicked ${count} times`;\r\n    }, [count]);\r\n\r\n\r\n    // 依赖列表中有函数\r\n    // useEffect(() => {\r\n    //     changeTitle();\r\n    // })\r\n\r\n    // const changeTitle = () => {\r\n    //     document.title = `You clicked ${count} times`;\r\n    // }\r\n\r\n    // 清除副作用\r\n    // const handleScroll = (e: any) => {\r\n    //     console.log(e.srcElement.documentElement.scrollTop);\r\n    // }\r\n    // useEffect(() => {\r\n    //     window.addEventListener(\"scroll\", handleScroll);\r\n    //     return () => { window.removeEventListener(\"scroll\", handleScroll) }\r\n    // })\r\n\r\n    // effect的依赖值频繁变化\r\n    useEffect(() => {\r\n        const id = setInterval(() => {\r\n            setCount(c => c + 1); // 这个 effect 依赖于 `count` state\r\n        }, 1000);\r\n        return () => clearInterval(id);\r\n    }, []);\r\n    return (\r\n        <div style={{ height: \"110vh\" }}>\r\n            <p>You clicked {count} times</p>\r\n            <button onClick={() => setCount(count + 1)}>\r\n                Click me\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EffectDemo;","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"./index\";\r\n\r\nfunction Toolbar() {\r\n    return (\r\n        <div>\r\n            <p>这个组件可以切换主题</p>\r\n            <ThemedButton />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ThemedButton() {\r\n    const theme: any = useContext(ThemeContext);\r\n    return (\r\n        <button style={{ background: theme.background, color: theme.foreground }}>\r\n            这个按钮的主题是：{theme.name}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Toolbar;","import React, { createContext, useState } from \"react\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\nconst themes = [\r\n    {\r\n        name: \"light\",\r\n        foreground: \"#000000\",\r\n        background: \"#eeeeee\"\r\n    },\r\n    {\r\n        name: \"dark\",\r\n        foreground: \"#ffffff\",\r\n        background: \"#222222\"\r\n    }\r\n];\r\n\r\nexport const ThemeContext = createContext(themes[0]);\r\n\r\nfunction ContextDemo() {\r\n\r\n    const [currentTheme, setCurrentTheme] = useState(0);\r\n    const changeTheme = () => {\r\n        setCurrentTheme(c => Number(!c))\r\n    }\r\n    return (\r\n        <ThemeContext.Provider value={themes[currentTheme]}>\r\n            <Toolbar />\r\n            <button onClick={changeTheme}>换一个</button>\r\n        </ThemeContext.Provider>\r\n    );\r\n}\r\n\r\nexport default ContextDemo;","import React, { useReducer } from \"react\";\r\n\r\ninterface IState {\r\n    count: number;\r\n}\r\n\r\nconst initialCount = { count: 0 };\r\n\r\n// 初始化state，将useReducer的第二个参数 作为参数传入\r\nconst init = (initialState: IState) => {\r\n    return { count: initialState.count + 100 };\r\n}\r\n// (state, action) => newState\r\n// action 是 setState的 入参\r\nconst reducer = (state: IState, action: any) => {\r\n    switch (action.type) {\r\n        case 'increment':\r\n            return { count: state.count + 1 };\r\n        case 'decrement':\r\n            return { count: state.count - 1 };\r\n        case 'reset':\r\n            return init(action.payload);\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\nconst useReducerDemo = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialCount, init);\r\n    // dispatch(action) <=> reducer(state, action)\r\n    // 初始化state <=> init(initialCount)\r\n    return (\r\n        <div>\r\n            <div>Count: {state.count}</div>\r\n            <button onClick={() => dispatch({ type: 'reset', payload: initialCount })}>\r\n                Reset\r\n            </button>\r\n            <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\r\n            <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default useReducerDemo;","import React, { useState, useCallback } from \"react\";\r\n\r\nfunction CallbackDemo() {\r\n    const [height, setHeight] = useState(0);\r\n\r\n    const measuredRef = useCallback(node => {\r\n        if (node !== null) {\r\n            setHeight(node.getBoundingClientRect().height);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1 ref={measuredRef}>Hello, world</h1>\r\n            <h2>The above header is {Math.round(height)}px tall</h2>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CallbackDemo;","import React, { useState, useMemo } from \"react\";\r\n\r\nconst Child = ({ name, content }: any) => {\r\n    function changeName(name: string) {\r\n        console.log('changeName')\r\n        return name + '名称结束'\r\n    }\r\n\r\n    // const otherName = changeName(name);\r\n    // 当content改变时，name不变，所以不执行changeName\r\n    const otherName = useMemo(() => changeName(name), [name])\r\n    return (\r\n        <>\r\n            <div>名称：{otherName}</div>\r\n            <div>内容：{content}</div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction MemoDemo() {\r\n    const [name, setName] = useState('名称')\r\n    const [content, setContent] = useState('内容')\r\n\r\n    return (\r\n        <>\r\n            <button onClick={() => setName(c => c + '-name-')}>change name</button>\r\n            <button onClick={() => setContent(c => c + \"-content-\")}>change content</button>\r\n            <Child name={name} content={content}></Child>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MemoDemo;","import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst useRefDemo = () => {\r\n    // 保存元素\r\n    const inputEl: any = useRef(null);\r\n    const onButtonClick = () => {\r\n        // `current` 指向已挂载到 DOM 上的文本输入元素\r\n        inputEl.current.focus();\r\n    };\r\n\r\n    // 保存变量，区别页面是否第一次渲染\r\n    const [time, setTime] = useState(0);\r\n    let renderFirst = useRef(true);\r\n    useEffect(() => {\r\n        const id = setInterval(() => { setTime(c => c + 1) }, 1000);\r\n        return () => clearInterval(id);\r\n    }, [])\r\n    useEffect(() => {\r\n        console.log('time', time);\r\n        renderFirst.current = false;\r\n    }, [time])\r\n    console.log(renderFirst);\r\n    return (\r\n        <>\r\n            <input ref={inputEl} type=\"text\" />\r\n            <button onClick={onButtonClick}>Focus the input</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default useRefDemo;","import React, { useState, useEffect, useLayoutEffect } from 'react';\r\n\r\nfunction Com() {\r\n    useEffect(() => {\r\n        console.log('useEffect 执行...');\r\n        return () => {\r\n            console.log('useEffect 销毁...');\r\n        }\r\n    });\r\n\r\n    useLayoutEffect(() => {\r\n        console.log('useLayoutEffect 执行...');\r\n        return () => {\r\n            console.log('useLayoutEffect 销毁...');\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {console.log('Com 渲染')}\r\n            <h2>我是Com组件</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LayoutEffectDemo = () => {\r\n    const [count, setCount] = useState(0)\r\n    return (\r\n        <div>\r\n            <Com />\r\n            <p>count：{count}</p>\r\n            <button onClick={() => setCount(count + 1)}>count + 1</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LayoutEffectDemo;","import React, { useMemo } from \"react\";\r\n\r\nconst useSelfHooks = ({ name, content }: any) => {\r\n    const changeName = (name: string) => {\r\n        console.log('changeName')\r\n        return name + '名称结束'\r\n    }\r\n\r\n    // const otherName = changeName(name);\r\n    // 当content改变时，name不变，所以不执行changeName\r\n    const otherName = useMemo(() => changeName(name), [name])\r\n    return (\r\n        <>\r\n            <div>名称：{otherName}</div>\r\n            <div>内容：{content}</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default useSelfHooks;","import React, { useState } from \"react\";\r\nimport useSelfHooks from \"./useSelfHooks\";\r\nimport { useForceUpdate, usePrevious } from \"../../utils/helper\";\r\n\r\nfunction SelfHooksDemo() {\r\n    const [name, setName] = useState('名称')\r\n    const [content, setContent] = useState('内容')\r\n\r\n    // Hooks组件\r\n    const selfHooks = useSelfHooks({ name, content });\r\n\r\n    // 强制更新Hooks\r\n    const forceUpdate = useForceUpdate();\r\n\r\n    const [count, setCount] = useState(0);\r\n    const prevCount = usePrevious(count);\r\n    return (\r\n        <>\r\n            <h3>自定义Hooks组件</h3>{selfHooks}\r\n            <button onClick={() => setName(c => c + '-name-')}>change name</button>\r\n            <button onClick={() => setContent(c => c + \"-content-\")}>change content</button>\r\n            <hr />\r\n            <h3>forceUpdate Hooks </h3>\r\n            <button onClick={() => forceUpdate()}>force update</button>\r\n            <hr />\r\n            <h3>获取上次的state Hooks</h3>\r\n            <p>Now: {count}, before: {prevCount}</p>\r\n            <button onClick={() => setCount(c => c + 1)}> + 1 </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SelfHooksDemo;","import { useReducer, useRef, useEffect } from \"react\";\r\n\r\nexport const useForceUpdate = () => {\r\n    const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n    return () => forceUpdate();\r\n}\r\n\r\nexport const usePrevious = (value: any) => {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Menu } from \"./components\";\nimport Basic from \"./pages/basic\";\nimport StateDemo from \"./pages/useState\";\nimport EffectDemo from \"./pages/useEffect\";\nimport ContextDemo from \"./pages/useContext\";\nimport ReducerDemo from \"./pages/useReducer\";\nimport CallbackDemo from \"./pages/useCallback\";\nimport MemoDemo from \"./pages/useMemo\";\nimport RefDemo from \"./pages/useRef\";\nimport LayoutEffectDemo from \"./pages/useLayoutEffect\";\nimport SelfHooksDemo from \"./pages/selfHooks\";\nimport \"./App.css\";\n\nexport default function BasicExample() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Menu />\n        <div className=\"page\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Basic />\n            </Route>\n            <Route path=\"/state\">\n              <StateDemo />\n            </Route>\n            <Route path=\"/effect\">\n              <EffectDemo />\n            </Route>\n            <Route path=\"/context\">\n              <ContextDemo />\n            </Route>\n            <Route path=\"/reducer\">\n              <ReducerDemo />\n            </Route>\n            <Route path=\"/callback\">\n              <CallbackDemo />\n            </Route>\n            <Route path=\"/memo\">\n              <MemoDemo />\n            </Route>\n            <Route path=\"/ref\">\n              <RefDemo />\n            </Route>\n            <Route path=\"/layoutEffect\">\n              <LayoutEffectDemo />\n            </Route>\n            <Route path=\"/selfHoosk\">\n              <SelfHooksDemo />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}